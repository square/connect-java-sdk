/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.squareup.connect.models;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.squareup.connect.models.Error;
import com.squareup.connect.models.V1Money;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;

/**
 * V1PaymentTax
 */

public class V1PaymentTax {
  @JsonProperty("errors")
  private List<Error> errors = new ArrayList<Error>();

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("applied_money")
  private V1Money appliedMoney = null;

  @JsonProperty("rate")
  private String rate = null;

  /**
   * Whether the tax is an ADDITIVE tax or an INCLUSIVE tax.
   */
  public enum InclusionTypeEnum {
    ADDITIVE("ADDITIVE"),
    
    INCLUSIVE("INCLUSIVE");

    private String value;

    InclusionTypeEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static InclusionTypeEnum fromValue(String text) {
      for (InclusionTypeEnum b : InclusionTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("inclusion_type")
  private InclusionTypeEnum inclusionType = null;

  @JsonProperty("fee_id")
  private String feeId = null;

  public V1PaymentTax errors(List<Error> errors) {
    this.errors = errors;
    return this;
  }

  public V1PaymentTax addErrorsItem(Error errorsItem) {
    this.errors.add(errorsItem);
    return this;
  }

   /**
   * Any errors that occurred during the request.
   * @return errors
  **/
  @ApiModelProperty(value = "Any errors that occurred during the request.")
  public List<Error> getErrors() {
    return errors;
  }

  public void setErrors(List<Error> errors) {
    this.errors = errors;
  }

  public V1PaymentTax name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The merchant-defined name of the tax.
   * @return name
  **/
  @ApiModelProperty(value = "The merchant-defined name of the tax.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public V1PaymentTax appliedMoney(V1Money appliedMoney) {
    this.appliedMoney = appliedMoney;
    return this;
  }

   /**
   * The amount of money that this tax adds to the payment.
   * @return appliedMoney
  **/
  @ApiModelProperty(value = "The amount of money that this tax adds to the payment.")
  public V1Money getAppliedMoney() {
    return appliedMoney;
  }

  public void setAppliedMoney(V1Money appliedMoney) {
    this.appliedMoney = appliedMoney;
  }

  public V1PaymentTax rate(String rate) {
    this.rate = rate;
    return this;
  }

   /**
   * The rate of the tax, as a string representation of a decimal number. A value of 0.07 corresponds to a rate of 7%.
   * @return rate
  **/
  @ApiModelProperty(value = "The rate of the tax, as a string representation of a decimal number. A value of 0.07 corresponds to a rate of 7%.")
  public String getRate() {
    return rate;
  }

  public void setRate(String rate) {
    this.rate = rate;
  }

  public V1PaymentTax inclusionType(InclusionTypeEnum inclusionType) {
    this.inclusionType = inclusionType;
    return this;
  }

   /**
   * Whether the tax is an ADDITIVE tax or an INCLUSIVE tax.
   * @return inclusionType
  **/
  @ApiModelProperty(value = "Whether the tax is an ADDITIVE tax or an INCLUSIVE tax.")
  public InclusionTypeEnum getInclusionType() {
    return inclusionType;
  }

  public void setInclusionType(InclusionTypeEnum inclusionType) {
    this.inclusionType = inclusionType;
  }

  public V1PaymentTax feeId(String feeId) {
    this.feeId = feeId;
    return this;
  }

   /**
   * The ID of the tax, if available. Taxes applied in older versions of Square Register might not have an ID.
   * @return feeId
  **/
  @ApiModelProperty(value = "The ID of the tax, if available. Taxes applied in older versions of Square Register might not have an ID.")
  public String getFeeId() {
    return feeId;
  }

  public void setFeeId(String feeId) {
    this.feeId = feeId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1PaymentTax v1PaymentTax = (V1PaymentTax) o;
    return Objects.equals(this.errors, v1PaymentTax.errors) &&
        Objects.equals(this.name, v1PaymentTax.name) &&
        Objects.equals(this.appliedMoney, v1PaymentTax.appliedMoney) &&
        Objects.equals(this.rate, v1PaymentTax.rate) &&
        Objects.equals(this.inclusionType, v1PaymentTax.inclusionType) &&
        Objects.equals(this.feeId, v1PaymentTax.feeId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(errors, name, appliedMoney, rate, inclusionType, feeId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1PaymentTax {\n");
    
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    appliedMoney: ").append(toIndentedString(appliedMoney)).append("\n");
    sb.append("    rate: ").append(toIndentedString(rate)).append("\n");
    sb.append("    inclusionType: ").append(toIndentedString(inclusionType)).append("\n");
    sb.append("    feeId: ").append(toIndentedString(feeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

