/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.squareup.connect.models;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.squareup.connect.models.Address;
import com.squareup.connect.models.Money;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Defines the parameters that can be included in the body of a request to the [Charge](#endpoint-charge) endpoint.
 */
@ApiModel(description = "Defines the parameters that can be included in the body of a request to the [Charge](#endpoint-charge) endpoint.")

public class ChargeRequest {
  @JsonProperty("idempotency_key")
  private String idempotencyKey = null;

  @JsonProperty("amount_money")
  private Money amountMoney = null;

  @JsonProperty("card_nonce")
  private String cardNonce = null;

  @JsonProperty("customer_card_id")
  private String customerCardId = null;

  @JsonProperty("delay_capture")
  private Boolean delayCapture = null;

  @JsonProperty("reference_id")
  private String referenceId = null;

  @JsonProperty("note")
  private String note = null;

  @JsonProperty("customer_id")
  private String customerId = null;

  @JsonProperty("billing_address")
  private Address billingAddress = null;

  @JsonProperty("shipping_address")
  private Address shippingAddress = null;

  @JsonProperty("buyer_email_address")
  private String buyerEmailAddress = null;

  public ChargeRequest idempotencyKey(String idempotencyKey) {
    this.idempotencyKey = idempotencyKey;
    return this;
  }

   /**
   * A value you specify that uniquely identifies this transaction among transactions you've created.  If you're unsure whether a particular transaction succeeded, you can reattempt it with the same idempotency key without worrying about double-charging the buyer.  See [Idempotency keys](#idempotencykeys) for more information.
   * @return idempotencyKey
  **/
  @ApiModelProperty(required = true, value = "A value you specify that uniquely identifies this transaction among transactions you've created.  If you're unsure whether a particular transaction succeeded, you can reattempt it with the same idempotency key without worrying about double-charging the buyer.  See [Idempotency keys](#idempotencykeys) for more information.")
  public String getIdempotencyKey() {
    return idempotencyKey;
  }

  public void setIdempotencyKey(String idempotencyKey) {
    this.idempotencyKey = idempotencyKey;
  }

  public ChargeRequest amountMoney(Money amountMoney) {
    this.amountMoney = amountMoney;
    return this;
  }

   /**
   * The amount of money to charge.  Note that you specify the amount in the __smallest denomination of the applicable currency__. For example, US dollar amounts are specified in cents. See [Working with monetary amounts](#workingwithmonetaryamounts) for details.  The value of `currency` must match the currency associated with the business that is charging the card.
   * @return amountMoney
  **/
  @ApiModelProperty(required = true, value = "The amount of money to charge.  Note that you specify the amount in the __smallest denomination of the applicable currency__. For example, US dollar amounts are specified in cents. See [Working with monetary amounts](#workingwithmonetaryamounts) for details.  The value of `currency` must match the currency associated with the business that is charging the card.")
  public Money getAmountMoney() {
    return amountMoney;
  }

  public void setAmountMoney(Money amountMoney) {
    this.amountMoney = amountMoney;
  }

  public ChargeRequest cardNonce(String cardNonce) {
    this.cardNonce = cardNonce;
    return this;
  }

   /**
   * A nonce generated from the `SqPaymentForm` that represents the card to charge.  The application that provides a nonce to this endpoint must be the _same application_ that generated the nonce with the `SqPaymentForm`. Otherwise, the nonce is invalid.  Do not provide a value for this field if you provide a value for `customer_card_id`.
   * @return cardNonce
  **/
  @ApiModelProperty(value = "A nonce generated from the `SqPaymentForm` that represents the card to charge.  The application that provides a nonce to this endpoint must be the _same application_ that generated the nonce with the `SqPaymentForm`. Otherwise, the nonce is invalid.  Do not provide a value for this field if you provide a value for `customer_card_id`.")
  public String getCardNonce() {
    return cardNonce;
  }

  public void setCardNonce(String cardNonce) {
    this.cardNonce = cardNonce;
  }

  public ChargeRequest customerCardId(String customerCardId) {
    this.customerCardId = customerCardId;
    return this;
  }

   /**
   * The ID of the customer card on file to charge. Do not provide a value for this field if you provide a value for `card_nonce`.  If you provide this value, you _must_ also provide a value for `customer_id`.
   * @return customerCardId
  **/
  @ApiModelProperty(value = "The ID of the customer card on file to charge. Do not provide a value for this field if you provide a value for `card_nonce`.  If you provide this value, you _must_ also provide a value for `customer_id`.")
  public String getCustomerCardId() {
    return customerCardId;
  }

  public void setCustomerCardId(String customerCardId) {
    this.customerCardId = customerCardId;
  }

  public ChargeRequest delayCapture(Boolean delayCapture) {
    this.delayCapture = delayCapture;
    return this;
  }

   /**
   * If `true`, the request will only perform an Auth on the provided card. You can then later perform either a Capture (with the [CaptureTransaction](#endpoint-capturetransaction) endpoint) or a Void (with the [VoidTransaction](#endpoint-voidtransaction) endpoint).  Default value: `false`
   * @return delayCapture
  **/
  @ApiModelProperty(value = "If `true`, the request will only perform an Auth on the provided card. You can then later perform either a Capture (with the [CaptureTransaction](#endpoint-capturetransaction) endpoint) or a Void (with the [VoidTransaction](#endpoint-voidtransaction) endpoint).  Default value: `false`")
  public Boolean getDelayCapture() {
    return delayCapture;
  }

  public void setDelayCapture(Boolean delayCapture) {
    this.delayCapture = delayCapture;
  }

  public ChargeRequest referenceId(String referenceId) {
    this.referenceId = referenceId;
    return this;
  }

   /**
   * An optional ID you can associate with the transaction for your own purposes (such as to associate the transaction with an entity ID in your own database).  This value cannot exceed 40 characters.
   * @return referenceId
  **/
  @ApiModelProperty(value = "An optional ID you can associate with the transaction for your own purposes (such as to associate the transaction with an entity ID in your own database).  This value cannot exceed 40 characters.")
  public String getReferenceId() {
    return referenceId;
  }

  public void setReferenceId(String referenceId) {
    this.referenceId = referenceId;
  }

  public ChargeRequest note(String note) {
    this.note = note;
    return this;
  }

   /**
   * An optional note to associate with the transaction.  This value cannot exceed 60 characters.
   * @return note
  **/
  @ApiModelProperty(value = "An optional note to associate with the transaction.  This value cannot exceed 60 characters.")
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }

  public ChargeRequest customerId(String customerId) {
    this.customerId = customerId;
    return this;
  }

   /**
   * The ID of the customer to associate this transaction with. This field is required if you provide a value for `customer_card_id`, and optional otherwise.
   * @return customerId
  **/
  @ApiModelProperty(value = "The ID of the customer to associate this transaction with. This field is required if you provide a value for `customer_card_id`, and optional otherwise.")
  public String getCustomerId() {
    return customerId;
  }

  public void setCustomerId(String customerId) {
    this.customerId = customerId;
  }

  public ChargeRequest billingAddress(Address billingAddress) {
    this.billingAddress = billingAddress;
    return this;
  }

   /**
   * The buyer's billing address. This value is optional, but this transaction is ineligible for chargeback protection if neither this parameter nor `shipping_address` is provided.
   * @return billingAddress
  **/
  @ApiModelProperty(value = "The buyer's billing address. This value is optional, but this transaction is ineligible for chargeback protection if neither this parameter nor `shipping_address` is provided.")
  public Address getBillingAddress() {
    return billingAddress;
  }

  public void setBillingAddress(Address billingAddress) {
    this.billingAddress = billingAddress;
  }

  public ChargeRequest shippingAddress(Address shippingAddress) {
    this.shippingAddress = shippingAddress;
    return this;
  }

   /**
   * The buyer's shipping address, if available. This value is optional, but this transaction is ineligible for chargeback protection if neither this parameter nor `billing_address` is provided.
   * @return shippingAddress
  **/
  @ApiModelProperty(value = "The buyer's shipping address, if available. This value is optional, but this transaction is ineligible for chargeback protection if neither this parameter nor `billing_address` is provided.")
  public Address getShippingAddress() {
    return shippingAddress;
  }

  public void setShippingAddress(Address shippingAddress) {
    this.shippingAddress = shippingAddress;
  }

  public ChargeRequest buyerEmailAddress(String buyerEmailAddress) {
    this.buyerEmailAddress = buyerEmailAddress;
    return this;
  }

   /**
   * The buyer's email address, if available. This value is optional, but this transaction is ineligible for chargeback protection if it is not provided.
   * @return buyerEmailAddress
  **/
  @ApiModelProperty(value = "The buyer's email address, if available. This value is optional, but this transaction is ineligible for chargeback protection if it is not provided.")
  public String getBuyerEmailAddress() {
    return buyerEmailAddress;
  }

  public void setBuyerEmailAddress(String buyerEmailAddress) {
    this.buyerEmailAddress = buyerEmailAddress;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChargeRequest chargeRequest = (ChargeRequest) o;
    return Objects.equals(this.idempotencyKey, chargeRequest.idempotencyKey) &&
        Objects.equals(this.amountMoney, chargeRequest.amountMoney) &&
        Objects.equals(this.cardNonce, chargeRequest.cardNonce) &&
        Objects.equals(this.customerCardId, chargeRequest.customerCardId) &&
        Objects.equals(this.delayCapture, chargeRequest.delayCapture) &&
        Objects.equals(this.referenceId, chargeRequest.referenceId) &&
        Objects.equals(this.note, chargeRequest.note) &&
        Objects.equals(this.customerId, chargeRequest.customerId) &&
        Objects.equals(this.billingAddress, chargeRequest.billingAddress) &&
        Objects.equals(this.shippingAddress, chargeRequest.shippingAddress) &&
        Objects.equals(this.buyerEmailAddress, chargeRequest.buyerEmailAddress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(idempotencyKey, amountMoney, cardNonce, customerCardId, delayCapture, referenceId, note, customerId, billingAddress, shippingAddress, buyerEmailAddress);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChargeRequest {\n");
    
    sb.append("    idempotencyKey: ").append(toIndentedString(idempotencyKey)).append("\n");
    sb.append("    amountMoney: ").append(toIndentedString(amountMoney)).append("\n");
    sb.append("    cardNonce: ").append(toIndentedString(cardNonce)).append("\n");
    sb.append("    customerCardId: ").append(toIndentedString(customerCardId)).append("\n");
    sb.append("    delayCapture: ").append(toIndentedString(delayCapture)).append("\n");
    sb.append("    referenceId: ").append(toIndentedString(referenceId)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    billingAddress: ").append(toIndentedString(billingAddress)).append("\n");
    sb.append("    shippingAddress: ").append(toIndentedString(shippingAddress)).append("\n");
    sb.append("    buyerEmailAddress: ").append(toIndentedString(buyerEmailAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

