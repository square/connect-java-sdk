/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.squareup.connect.models;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.squareup.connect.models.CatalogIdMapping;
import com.squareup.connect.models.CatalogObject;
import com.squareup.connect.models.Error;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;

/**
 * 
 */
@ApiModel(description = "")

public class UpsertCatalogObjectResponse {
  @JsonProperty("errors")
  private List<Error> errors = new ArrayList<Error>();

  @JsonProperty("catalog_object")
  private CatalogObject catalogObject = null;

  @JsonProperty("id_mappings")
  private List<CatalogIdMapping> idMappings = new ArrayList<CatalogIdMapping>();

  public UpsertCatalogObjectResponse errors(List<Error> errors) {
    this.errors = errors;
    return this;
  }

  public UpsertCatalogObjectResponse addErrorsItem(Error errorsItem) {
    this.errors.add(errorsItem);
    return this;
  }

   /**
   * The set of [Error](#type-error)s encountered.
   * @return errors
  **/
  @ApiModelProperty(value = "The set of [Error](#type-error)s encountered.")
  public List<Error> getErrors() {
    return errors;
  }

  public void setErrors(List<Error> errors) {
    this.errors = errors;
  }

  public UpsertCatalogObjectResponse catalogObject(CatalogObject catalogObject) {
    this.catalogObject = catalogObject;
    return this;
  }

   /**
   * The created [CatalogObject](#type-catalogobject).
   * @return catalogObject
  **/
  @ApiModelProperty(value = "The created [CatalogObject](#type-catalogobject).")
  public CatalogObject getCatalogObject() {
    return catalogObject;
  }

  public void setCatalogObject(CatalogObject catalogObject) {
    this.catalogObject = catalogObject;
  }

  public UpsertCatalogObjectResponse idMappings(List<CatalogIdMapping> idMappings) {
    this.idMappings = idMappings;
    return this;
  }

  public UpsertCatalogObjectResponse addIdMappingsItem(CatalogIdMapping idMappingsItem) {
    this.idMappings.add(idMappingsItem);
    return this;
  }

   /**
   * The mapping between client and server IDs for this Upsert.
   * @return idMappings
  **/
  @ApiModelProperty(value = "The mapping between client and server IDs for this Upsert.")
  public List<CatalogIdMapping> getIdMappings() {
    return idMappings;
  }

  public void setIdMappings(List<CatalogIdMapping> idMappings) {
    this.idMappings = idMappings;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpsertCatalogObjectResponse upsertCatalogObjectResponse = (UpsertCatalogObjectResponse) o;
    return Objects.equals(this.errors, upsertCatalogObjectResponse.errors) &&
        Objects.equals(this.catalogObject, upsertCatalogObjectResponse.catalogObject) &&
        Objects.equals(this.idMappings, upsertCatalogObjectResponse.idMappings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(errors, catalogObject, idMappings);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpsertCatalogObjectResponse {\n");
    
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    catalogObject: ").append(toIndentedString(catalogObject)).append("\n");
    sb.append("    idMappings: ").append(toIndentedString(idMappings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

