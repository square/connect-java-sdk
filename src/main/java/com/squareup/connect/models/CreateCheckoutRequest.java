/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.squareup.connect.models;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.squareup.connect.models.Address;
import com.squareup.connect.models.CreateOrderRequestOrder;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Defines the parameters that can be included in the body of a request to the [CreateCheckout](#endpoint-createcheckout) endpoint.
 */
@ApiModel(description = "Defines the parameters that can be included in the body of a request to the [CreateCheckout](#endpoint-createcheckout) endpoint.")

public class CreateCheckoutRequest {
  @JsonProperty("idempotency_key")
  private String idempotencyKey = null;

  @JsonProperty("order")
  private CreateOrderRequestOrder order = null;

  @JsonProperty("ask_for_shipping_address")
  private Boolean askForShippingAddress = null;

  @JsonProperty("merchant_support_email")
  private String merchantSupportEmail = null;

  @JsonProperty("pre_populate_buyer_email")
  private String prePopulateBuyerEmail = null;

  @JsonProperty("pre_populate_shipping_address")
  private Address prePopulateShippingAddress = null;

  @JsonProperty("redirect_url")
  private String redirectUrl = null;

  public CreateCheckoutRequest idempotencyKey(String idempotencyKey) {
    this.idempotencyKey = idempotencyKey;
    return this;
  }

   /**
   * A unique string that identifies this checkout among others you've created. It can be any valid string but must be unique for every order sent to Square Checkout for a given location ID.  The idempotency key is used to avoid processing the same order more than once. If you're unsure whether a particular checkout was created successfully, you can reattempt it with the same idempotency key and all the same other parameters without worrying about creating duplicates.  We recommend using a random number/string generator native to the language you are working in to generate strings for your idempotency keys.  See [Idempotency keys](#idempotencykeys) for more information.
   * @return idempotencyKey
  **/
  @ApiModelProperty(required = true, value = "A unique string that identifies this checkout among others you've created. It can be any valid string but must be unique for every order sent to Square Checkout for a given location ID.  The idempotency key is used to avoid processing the same order more than once. If you're unsure whether a particular checkout was created successfully, you can reattempt it with the same idempotency key and all the same other parameters without worrying about creating duplicates.  We recommend using a random number/string generator native to the language you are working in to generate strings for your idempotency keys.  See [Idempotency keys](#idempotencykeys) for more information.")
  public String getIdempotencyKey() {
    return idempotencyKey;
  }

  public void setIdempotencyKey(String idempotencyKey) {
    this.idempotencyKey = idempotencyKey;
  }

  public CreateCheckoutRequest order(CreateOrderRequestOrder order) {
    this.order = order;
    return this;
  }

   /**
   * The order including line items to be checked out.
   * @return order
  **/
  @ApiModelProperty(required = true, value = "The order including line items to be checked out.")
  public CreateOrderRequestOrder getOrder() {
    return order;
  }

  public void setOrder(CreateOrderRequestOrder order) {
    this.order = order;
  }

  public CreateCheckoutRequest askForShippingAddress(Boolean askForShippingAddress) {
    this.askForShippingAddress = askForShippingAddress;
    return this;
  }

   /**
   * If `true`, Square Checkout will collect shipping information on your behalf and store that information with the transaction information in your Square Dashboard.  Default: `false`.
   * @return askForShippingAddress
  **/
  @ApiModelProperty(value = "If `true`, Square Checkout will collect shipping information on your behalf and store that information with the transaction information in your Square Dashboard.  Default: `false`.")
  public Boolean getAskForShippingAddress() {
    return askForShippingAddress;
  }

  public void setAskForShippingAddress(Boolean askForShippingAddress) {
    this.askForShippingAddress = askForShippingAddress;
  }

  public CreateCheckoutRequest merchantSupportEmail(String merchantSupportEmail) {
    this.merchantSupportEmail = merchantSupportEmail;
    return this;
  }

   /**
   * The email address to display on the Square Checkout confirmation page and confirmation email that the buyer can use to contact the merchant.  If this value is not set, the confirmation page and email will display the primary email address associated with the merchant's Square account.  Default: none; only exists if explicitly set.
   * @return merchantSupportEmail
  **/
  @ApiModelProperty(value = "The email address to display on the Square Checkout confirmation page and confirmation email that the buyer can use to contact the merchant.  If this value is not set, the confirmation page and email will display the primary email address associated with the merchant's Square account.  Default: none; only exists if explicitly set.")
  public String getMerchantSupportEmail() {
    return merchantSupportEmail;
  }

  public void setMerchantSupportEmail(String merchantSupportEmail) {
    this.merchantSupportEmail = merchantSupportEmail;
  }

  public CreateCheckoutRequest prePopulateBuyerEmail(String prePopulateBuyerEmail) {
    this.prePopulateBuyerEmail = prePopulateBuyerEmail;
    return this;
  }

   /**
   * If provided, the buyer's email is pre-populated on the checkout page as an editable text field.  Default: none; only exists if explicitly set.
   * @return prePopulateBuyerEmail
  **/
  @ApiModelProperty(value = "If provided, the buyer's email is pre-populated on the checkout page as an editable text field.  Default: none; only exists if explicitly set.")
  public String getPrePopulateBuyerEmail() {
    return prePopulateBuyerEmail;
  }

  public void setPrePopulateBuyerEmail(String prePopulateBuyerEmail) {
    this.prePopulateBuyerEmail = prePopulateBuyerEmail;
  }

  public CreateCheckoutRequest prePopulateShippingAddress(Address prePopulateShippingAddress) {
    this.prePopulateShippingAddress = prePopulateShippingAddress;
    return this;
  }

   /**
   * If provided, the buyer's shipping info is pre-populated on the checkout page as editable text fields.  Default: none; only exists if explicitly set.
   * @return prePopulateShippingAddress
  **/
  @ApiModelProperty(value = "If provided, the buyer's shipping info is pre-populated on the checkout page as editable text fields.  Default: none; only exists if explicitly set.")
  public Address getPrePopulateShippingAddress() {
    return prePopulateShippingAddress;
  }

  public void setPrePopulateShippingAddress(Address prePopulateShippingAddress) {
    this.prePopulateShippingAddress = prePopulateShippingAddress;
  }

  public CreateCheckoutRequest redirectUrl(String redirectUrl) {
    this.redirectUrl = redirectUrl;
    return this;
  }

   /**
   * The URL to redirect to after checkout is completed with `checkoutId`, Square's `orderId`, `transactionId`, and `referenceId` appended as URL parameters. For example, if the provided redirect_url is `http://www.example.com/order-complete`, a successful transaction redirects the customer to:  `http://www.example.com/order-complete?checkoutId=xxxxxx&orderId=xxxxxx&referenceId=xxxxxx&transactionId=xxxxxx`  If you do not provide a redirect URL, Square Checkout will display an order confirmation page on your behalf; however Square strongly recommends that you provide a redirect URL so you can verify the transaction results and finalize the order through your existing/normal confirmation workflow.  Default: none; only exists if explicitly set.
   * @return redirectUrl
  **/
  @ApiModelProperty(value = "The URL to redirect to after checkout is completed with `checkoutId`, Square's `orderId`, `transactionId`, and `referenceId` appended as URL parameters. For example, if the provided redirect_url is `http://www.example.com/order-complete`, a successful transaction redirects the customer to:  `http://www.example.com/order-complete?checkoutId=xxxxxx&orderId=xxxxxx&referenceId=xxxxxx&transactionId=xxxxxx`  If you do not provide a redirect URL, Square Checkout will display an order confirmation page on your behalf; however Square strongly recommends that you provide a redirect URL so you can verify the transaction results and finalize the order through your existing/normal confirmation workflow.  Default: none; only exists if explicitly set.")
  public String getRedirectUrl() {
    return redirectUrl;
  }

  public void setRedirectUrl(String redirectUrl) {
    this.redirectUrl = redirectUrl;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateCheckoutRequest createCheckoutRequest = (CreateCheckoutRequest) o;
    return Objects.equals(this.idempotencyKey, createCheckoutRequest.idempotencyKey) &&
        Objects.equals(this.order, createCheckoutRequest.order) &&
        Objects.equals(this.askForShippingAddress, createCheckoutRequest.askForShippingAddress) &&
        Objects.equals(this.merchantSupportEmail, createCheckoutRequest.merchantSupportEmail) &&
        Objects.equals(this.prePopulateBuyerEmail, createCheckoutRequest.prePopulateBuyerEmail) &&
        Objects.equals(this.prePopulateShippingAddress, createCheckoutRequest.prePopulateShippingAddress) &&
        Objects.equals(this.redirectUrl, createCheckoutRequest.redirectUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(idempotencyKey, order, askForShippingAddress, merchantSupportEmail, prePopulateBuyerEmail, prePopulateShippingAddress, redirectUrl);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateCheckoutRequest {\n");
    
    sb.append("    idempotencyKey: ").append(toIndentedString(idempotencyKey)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    askForShippingAddress: ").append(toIndentedString(askForShippingAddress)).append("\n");
    sb.append("    merchantSupportEmail: ").append(toIndentedString(merchantSupportEmail)).append("\n");
    sb.append("    prePopulateBuyerEmail: ").append(toIndentedString(prePopulateBuyerEmail)).append("\n");
    sb.append("    prePopulateShippingAddress: ").append(toIndentedString(prePopulateShippingAddress)).append("\n");
    sb.append("    redirectUrl: ").append(toIndentedString(redirectUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

