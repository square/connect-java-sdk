/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.squareup.connect.models;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.squareup.connect.models.Address;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Defines the fields that are included in the request body of a request to the [CreateCustomerCard](#endpoint-createcustomercard) endpoint.
 */
@ApiModel(description = "Defines the fields that are included in the request body of a request to the [CreateCustomerCard](#endpoint-createcustomercard) endpoint.")

public class CreateCustomerCardRequest {
  @JsonProperty("card_nonce")
  private String cardNonce = null;

  @JsonProperty("billing_address")
  private Address billingAddress = null;

  @JsonProperty("cardholder_name")
  private String cardholderName = null;

  public CreateCustomerCardRequest cardNonce(String cardNonce) {
    this.cardNonce = cardNonce;
    return this;
  }

   /**
   * A card nonce representing the credit card to link to the customer.  Card nonces are generated by the `SqPaymentForm` that buyers enter their card information into. See [Embedding the payment form](/payments/sqpaymentform/overview) for more information.  __Note:__ Card nonces generated by digital wallets (e.g., Apple Pay) cannot be used to create a customer card.
   * @return cardNonce
  **/
  @ApiModelProperty(required = true, value = "A card nonce representing the credit card to link to the customer.  Card nonces are generated by the `SqPaymentForm` that buyers enter their card information into. See [Embedding the payment form](/payments/sqpaymentform/overview) for more information.  __Note:__ Card nonces generated by digital wallets (e.g., Apple Pay) cannot be used to create a customer card.")
  public String getCardNonce() {
    return cardNonce;
  }

  public void setCardNonce(String cardNonce) {
    this.cardNonce = cardNonce;
  }

  public CreateCustomerCardRequest billingAddress(Address billingAddress) {
    this.billingAddress = billingAddress;
    return this;
  }

   /**
   * Address information for the card on file. Only the `postal_code` field is required for payments in the US and Canada.
   * @return billingAddress
  **/
  @ApiModelProperty(value = "Address information for the card on file. Only the `postal_code` field is required for payments in the US and Canada.")
  public Address getBillingAddress() {
    return billingAddress;
  }

  public void setBillingAddress(Address billingAddress) {
    this.billingAddress = billingAddress;
  }

  public CreateCustomerCardRequest cardholderName(String cardholderName) {
    this.cardholderName = cardholderName;
    return this;
  }

   /**
   * The cardholder's name.
   * @return cardholderName
  **/
  @ApiModelProperty(value = "The cardholder's name.")
  public String getCardholderName() {
    return cardholderName;
  }

  public void setCardholderName(String cardholderName) {
    this.cardholderName = cardholderName;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateCustomerCardRequest createCustomerCardRequest = (CreateCustomerCardRequest) o;
    return Objects.equals(this.cardNonce, createCustomerCardRequest.cardNonce) &&
        Objects.equals(this.billingAddress, createCustomerCardRequest.billingAddress) &&
        Objects.equals(this.cardholderName, createCustomerCardRequest.cardholderName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardNonce, billingAddress, cardholderName);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateCustomerCardRequest {\n");
    
    sb.append("    cardNonce: ").append(toIndentedString(cardNonce)).append("\n");
    sb.append("    billingAddress: ").append(toIndentedString(billingAddress)).append("\n");
    sb.append("    cardholderName: ").append(toIndentedString(cardholderName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

