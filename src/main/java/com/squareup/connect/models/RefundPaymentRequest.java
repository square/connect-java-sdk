/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.squareup.connect.models;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.squareup.connect.models.Money;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Refunds a payment.
 */
@ApiModel(description = "Refunds a payment.")

public class RefundPaymentRequest {
  @JsonProperty("idempotency_key")
  private String idempotencyKey = null;

  @JsonProperty("amount_money")
  private Money amountMoney = null;

  @JsonProperty("app_fee_money")
  private Money appFeeMoney = null;

  @JsonProperty("payment_id")
  private String paymentId = null;

  @JsonProperty("reason")
  private String reason = null;

  public RefundPaymentRequest idempotencyKey(String idempotencyKey) {
    this.idempotencyKey = idempotencyKey;
    return this;
  }

   /**
   *  A unique string that identifies this RefundPayment request. Key can be any valid string but must be unique for every RefundPayment request.  For more information, see [Idempotency keys](/basics/api101/idempotency).
   * @return idempotencyKey
  **/
  @ApiModelProperty(required = true, value = " A unique string that identifies this RefundPayment request. Key can be any valid string but must be unique for every RefundPayment request.  For more information, see [Idempotency keys](/basics/api101/idempotency).")
  public String getIdempotencyKey() {
    return idempotencyKey;
  }

  public void setIdempotencyKey(String idempotencyKey) {
    this.idempotencyKey = idempotencyKey;
  }

  public RefundPaymentRequest amountMoney(Money amountMoney) {
    this.amountMoney = amountMoney;
    return this;
  }

   /**
   * The amount of money to refund.  Cannot be more than the `total_money` value of the payment minus the total amount of all previously completed refunds for this payment.  Must be specified in the smallest denomination of the applicable currency. For example, US dollar amounts are specified in cents. See [Working with monetary amounts](/build-basics/working-with-monetary-amounts) for details.  The currency code must match the currency associated with the business that is charging the card.
   * @return amountMoney
  **/
  @ApiModelProperty(required = true, value = "The amount of money to refund.  Cannot be more than the `total_money` value of the payment minus the total amount of all previously completed refunds for this payment.  Must be specified in the smallest denomination of the applicable currency. For example, US dollar amounts are specified in cents. See [Working with monetary amounts](/build-basics/working-with-monetary-amounts) for details.  The currency code must match the currency associated with the business that is charging the card.")
  public Money getAmountMoney() {
    return amountMoney;
  }

  public void setAmountMoney(Money amountMoney) {
    this.amountMoney = amountMoney;
  }

  public RefundPaymentRequest appFeeMoney(Money appFeeMoney) {
    this.appFeeMoney = appFeeMoney;
    return this;
  }

   /**
   * Amount of money the developer will contribute to help cover the refunded amount. Specified in the smallest denomination of the applicable currency. For example, US dollar amounts are specified in cents.  Value cannot be more than the `amount_money`.  You can specify this parameter in a refund request only if the  same parameter was also included when taking the payment. This is part of the application fee  scenario the API supports.  For more information, see  [Collect Fees](/payments-api/take-payments-and-collect-fees)
   * @return appFeeMoney
  **/
  @ApiModelProperty(value = "Amount of money the developer will contribute to help cover the refunded amount. Specified in the smallest denomination of the applicable currency. For example, US dollar amounts are specified in cents.  Value cannot be more than the `amount_money`.  You can specify this parameter in a refund request only if the  same parameter was also included when taking the payment. This is part of the application fee  scenario the API supports.  For more information, see  [Collect Fees](/payments-api/take-payments-and-collect-fees)")
  public Money getAppFeeMoney() {
    return appFeeMoney;
  }

  public void setAppFeeMoney(Money appFeeMoney) {
    this.appFeeMoney = appFeeMoney;
  }

  public RefundPaymentRequest paymentId(String paymentId) {
    this.paymentId = paymentId;
    return this;
  }

   /**
   * Unique ID of the payment being refunded.
   * @return paymentId
  **/
  @ApiModelProperty(value = "Unique ID of the payment being refunded.")
  public String getPaymentId() {
    return paymentId;
  }

  public void setPaymentId(String paymentId) {
    this.paymentId = paymentId;
  }

  public RefundPaymentRequest reason(String reason) {
    this.reason = reason;
    return this;
  }

   /**
   * A description of the reason for the refund.
   * @return reason
  **/
  @ApiModelProperty(value = "A description of the reason for the refund.")
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RefundPaymentRequest refundPaymentRequest = (RefundPaymentRequest) o;
    return Objects.equals(this.idempotencyKey, refundPaymentRequest.idempotencyKey) &&
        Objects.equals(this.amountMoney, refundPaymentRequest.amountMoney) &&
        Objects.equals(this.appFeeMoney, refundPaymentRequest.appFeeMoney) &&
        Objects.equals(this.paymentId, refundPaymentRequest.paymentId) &&
        Objects.equals(this.reason, refundPaymentRequest.reason);
  }

  @Override
  public int hashCode() {
    return Objects.hash(idempotencyKey, amountMoney, appFeeMoney, paymentId, reason);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RefundPaymentRequest {\n");
    
    sb.append("    idempotencyKey: ").append(toIndentedString(idempotencyKey)).append("\n");
    sb.append("    amountMoney: ").append(toIndentedString(amountMoney)).append("\n");
    sb.append("    appFeeMoney: ").append(toIndentedString(appFeeMoney)).append("\n");
    sb.append("    paymentId: ").append(toIndentedString(paymentId)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

