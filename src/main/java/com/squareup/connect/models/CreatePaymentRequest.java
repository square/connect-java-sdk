/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.squareup.connect.models;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.squareup.connect.models.Address;
import com.squareup.connect.models.Money;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Creates a payment from the source (nonce, card on file, etc.)  The &#x60;PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS&#x60; OAuth permission is required to enable application fees.  For more information, see [Payments and Refunds Overview](/payments-api/overview).  For information about application fees in a payment, see [Collect Fees](/payments-api/take-payments-and-collect-fees).
 */
@ApiModel(description = "Creates a payment from the source (nonce, card on file, etc.)  The `PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS` OAuth permission is required to enable application fees.  For more information, see [Payments and Refunds Overview](/payments-api/overview).  For information about application fees in a payment, see [Collect Fees](/payments-api/take-payments-and-collect-fees).")

public class CreatePaymentRequest {
  @JsonProperty("source_id")
  private String sourceId = null;

  @JsonProperty("idempotency_key")
  private String idempotencyKey = null;

  @JsonProperty("amount_money")
  private Money amountMoney = null;

  @JsonProperty("tip_money")
  private Money tipMoney = null;

  @JsonProperty("app_fee_money")
  private Money appFeeMoney = null;

  @JsonProperty("autocomplete")
  private Boolean autocomplete = null;

  @JsonProperty("order_id")
  private String orderId = null;

  @JsonProperty("customer_id")
  private String customerId = null;

  @JsonProperty("location_id")
  private String locationId = null;

  @JsonProperty("reference_id")
  private String referenceId = null;

  @JsonProperty("verification_token")
  private String verificationToken = null;

  @JsonProperty("accept_partial_authorization")
  private Boolean acceptPartialAuthorization = null;

  @JsonProperty("buyer_email_address")
  private String buyerEmailAddress = null;

  @JsonProperty("billing_address")
  private Address billingAddress = null;

  @JsonProperty("shipping_address")
  private Address shippingAddress = null;

  @JsonProperty("note")
  private String note = null;

  public CreatePaymentRequest sourceId(String sourceId) {
    this.sourceId = sourceId;
    return this;
  }

   /**
   * The ID for the source of funds for this payment.  This can be a nonce generated by the Payment Form or a card on file made with the Customers API.
   * @return sourceId
  **/
  @ApiModelProperty(required = true, value = "The ID for the source of funds for this payment.  This can be a nonce generated by the Payment Form or a card on file made with the Customers API.")
  public String getSourceId() {
    return sourceId;
  }

  public void setSourceId(String sourceId) {
    this.sourceId = sourceId;
  }

  public CreatePaymentRequest idempotencyKey(String idempotencyKey) {
    this.idempotencyKey = idempotencyKey;
    return this;
  }

   /**
   * A unique string that identifies this CreatePayment request. Keys can be any valid string but must be unique for every CreatePayment request.  Max: 45 characters  See [Idempotency keys](/basics/api101/idempotency) for more information.
   * @return idempotencyKey
  **/
  @ApiModelProperty(required = true, value = "A unique string that identifies this CreatePayment request. Keys can be any valid string but must be unique for every CreatePayment request.  Max: 45 characters  See [Idempotency keys](/basics/api101/idempotency) for more information.")
  public String getIdempotencyKey() {
    return idempotencyKey;
  }

  public void setIdempotencyKey(String idempotencyKey) {
    this.idempotencyKey = idempotencyKey;
  }

  public CreatePaymentRequest amountMoney(Money amountMoney) {
    this.amountMoney = amountMoney;
    return this;
  }

   /**
   * The amount of money to accept for this payment, not including `tip_money`.  Must be specified in the smallest denomination of the applicable currency. For example, US dollar amounts are specified in cents. See [Working with monetary amounts](/build-basics/working-with-monetary-amounts) for details.  The currency code must match the currency associated with the business that is accepting the payment.
   * @return amountMoney
  **/
  @ApiModelProperty(required = true, value = "The amount of money to accept for this payment, not including `tip_money`.  Must be specified in the smallest denomination of the applicable currency. For example, US dollar amounts are specified in cents. See [Working with monetary amounts](/build-basics/working-with-monetary-amounts) for details.  The currency code must match the currency associated with the business that is accepting the payment.")
  public Money getAmountMoney() {
    return amountMoney;
  }

  public void setAmountMoney(Money amountMoney) {
    this.amountMoney = amountMoney;
  }

  public CreatePaymentRequest tipMoney(Money tipMoney) {
    this.tipMoney = tipMoney;
    return this;
  }

   /**
   * The amount designated as a tip, in addition to `amount_money`  Must be specified in the smallest denomination of the applicable currency. For example, US dollar amounts are specified in cents. See [Working with monetary amounts](/build-basics/working-with-monetary-amounts) for details.  The currency code must match the currency associated with the business that is accepting the payment.
   * @return tipMoney
  **/
  @ApiModelProperty(value = "The amount designated as a tip, in addition to `amount_money`  Must be specified in the smallest denomination of the applicable currency. For example, US dollar amounts are specified in cents. See [Working with monetary amounts](/build-basics/working-with-monetary-amounts) for details.  The currency code must match the currency associated with the business that is accepting the payment.")
  public Money getTipMoney() {
    return tipMoney;
  }

  public void setTipMoney(Money tipMoney) {
    this.tipMoney = tipMoney;
  }

  public CreatePaymentRequest appFeeMoney(Money appFeeMoney) {
    this.appFeeMoney = appFeeMoney;
    return this;
  }

   /**
   * The amount of money the developer is taking as a fee for facilitating the payment on behalf of the seller.  Cannot be more than 90% of the total amount of the Payment.  Must be specified in the smallest denomination of the applicable currency. For example, US dollar amounts are specified in cents. See [Working with monetary amounts](/build-basics/working-with-monetary-amounts) for details.  The currency code must match the currency associated with the business that is accepting the payment.  For more information about the application fee scenario, see [Collect Fees](/payments-api/take-payments-and-collect-fees).
   * @return appFeeMoney
  **/
  @ApiModelProperty(value = "The amount of money the developer is taking as a fee for facilitating the payment on behalf of the seller.  Cannot be more than 90% of the total amount of the Payment.  Must be specified in the smallest denomination of the applicable currency. For example, US dollar amounts are specified in cents. See [Working with monetary amounts](/build-basics/working-with-monetary-amounts) for details.  The currency code must match the currency associated with the business that is accepting the payment.  For more information about the application fee scenario, see [Collect Fees](/payments-api/take-payments-and-collect-fees).")
  public Money getAppFeeMoney() {
    return appFeeMoney;
  }

  public void setAppFeeMoney(Money appFeeMoney) {
    this.appFeeMoney = appFeeMoney;
  }

  public CreatePaymentRequest autocomplete(Boolean autocomplete) {
    this.autocomplete = autocomplete;
    return this;
  }

   /**
   * If set to `true`, this payment will be completed when possible. If set to `false`, this payment will be held in an approved state until either explicitly completed or canceled. For more information, see [Delayed Payments](/payments-api/take-payments#delayed-payments).  Default: true
   * @return autocomplete
  **/
  @ApiModelProperty(value = "If set to `true`, this payment will be completed when possible. If set to `false`, this payment will be held in an approved state until either explicitly completed or canceled. For more information, see [Delayed Payments](/payments-api/take-payments#delayed-payments).  Default: true")
  public Boolean getAutocomplete() {
    return autocomplete;
  }

  public void setAutocomplete(Boolean autocomplete) {
    this.autocomplete = autocomplete;
  }

  public CreatePaymentRequest orderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

   /**
   * Associate a previously created order with this payment
   * @return orderId
  **/
  @ApiModelProperty(value = "Associate a previously created order with this payment")
  public String getOrderId() {
    return orderId;
  }

  public void setOrderId(String orderId) {
    this.orderId = orderId;
  }

  public CreatePaymentRequest customerId(String customerId) {
    this.customerId = customerId;
    return this;
  }

   /**
   * The ID of the customer associated with the payment. Required if the `source_id` refers to a card on file created using the Customers API.
   * @return customerId
  **/
  @ApiModelProperty(value = "The ID of the customer associated with the payment. Required if the `source_id` refers to a card on file created using the Customers API.")
  public String getCustomerId() {
    return customerId;
  }

  public void setCustomerId(String customerId) {
    this.customerId = customerId;
  }

  public CreatePaymentRequest locationId(String locationId) {
    this.locationId = locationId;
    return this;
  }

   /**
   * The location ID to associate with the payment. If not specified, the default location is used.
   * @return locationId
  **/
  @ApiModelProperty(value = "The location ID to associate with the payment. If not specified, the default location is used.")
  public String getLocationId() {
    return locationId;
  }

  public void setLocationId(String locationId) {
    this.locationId = locationId;
  }

  public CreatePaymentRequest referenceId(String referenceId) {
    this.referenceId = referenceId;
    return this;
  }

   /**
   * A user-defined ID to associate with the payment. You can use this field to associate the payment to an entity in an external system. For example, you might specify an order ID that is generated by a third-party shopping cart.  Limit 40 characters.
   * @return referenceId
  **/
  @ApiModelProperty(value = "A user-defined ID to associate with the payment. You can use this field to associate the payment to an entity in an external system. For example, you might specify an order ID that is generated by a third-party shopping cart.  Limit 40 characters.")
  public String getReferenceId() {
    return referenceId;
  }

  public void setReferenceId(String referenceId) {
    this.referenceId = referenceId;
  }

  public CreatePaymentRequest verificationToken(String verificationToken) {
    this.verificationToken = verificationToken;
    return this;
  }

   /**
   * An identifying token generated by `SqPaymentForm.verifyBuyer()`. Verification tokens encapsulate customer device information and 3-D Secure challenge results to indicate that Square has verified the buyer identity.  See the [SCA Overview](/sca-overview) for more.
   * @return verificationToken
  **/
  @ApiModelProperty(value = "An identifying token generated by `SqPaymentForm.verifyBuyer()`. Verification tokens encapsulate customer device information and 3-D Secure challenge results to indicate that Square has verified the buyer identity.  See the [SCA Overview](/sca-overview) for more.")
  public String getVerificationToken() {
    return verificationToken;
  }

  public void setVerificationToken(String verificationToken) {
    this.verificationToken = verificationToken;
  }

  public CreatePaymentRequest acceptPartialAuthorization(Boolean acceptPartialAuthorization) {
    this.acceptPartialAuthorization = acceptPartialAuthorization;
    return this;
  }

   /**
   * If set to true and charging a Square Gift Card, a payment may be returned with amount_money equal to less than what was requested.  Example, a request for $20 when charging a Square Gift Card with balance of $5 wil result in an APPROVED payment of $5.  You may choose to prompt the buyer for an additional payment to cover the remainder, or cancel the gift card payment.  Cannot be `true` when `autocomplete = true  For more information, see [Partial amount with Square gift cards](/payments-api/take-payments#partial-payment-gift-card).  Default: false
   * @return acceptPartialAuthorization
  **/
  @ApiModelProperty(value = "If set to true and charging a Square Gift Card, a payment may be returned with amount_money equal to less than what was requested.  Example, a request for $20 when charging a Square Gift Card with balance of $5 wil result in an APPROVED payment of $5.  You may choose to prompt the buyer for an additional payment to cover the remainder, or cancel the gift card payment.  Cannot be `true` when `autocomplete = true  For more information, see [Partial amount with Square gift cards](/payments-api/take-payments#partial-payment-gift-card).  Default: false")
  public Boolean getAcceptPartialAuthorization() {
    return acceptPartialAuthorization;
  }

  public void setAcceptPartialAuthorization(Boolean acceptPartialAuthorization) {
    this.acceptPartialAuthorization = acceptPartialAuthorization;
  }

  public CreatePaymentRequest buyerEmailAddress(String buyerEmailAddress) {
    this.buyerEmailAddress = buyerEmailAddress;
    return this;
  }

   /**
   * The buyer's e-mail address
   * @return buyerEmailAddress
  **/
  @ApiModelProperty(value = "The buyer's e-mail address")
  public String getBuyerEmailAddress() {
    return buyerEmailAddress;
  }

  public void setBuyerEmailAddress(String buyerEmailAddress) {
    this.buyerEmailAddress = buyerEmailAddress;
  }

  public CreatePaymentRequest billingAddress(Address billingAddress) {
    this.billingAddress = billingAddress;
    return this;
  }

   /**
   * The buyer's billing address.
   * @return billingAddress
  **/
  @ApiModelProperty(value = "The buyer's billing address.")
  public Address getBillingAddress() {
    return billingAddress;
  }

  public void setBillingAddress(Address billingAddress) {
    this.billingAddress = billingAddress;
  }

  public CreatePaymentRequest shippingAddress(Address shippingAddress) {
    this.shippingAddress = shippingAddress;
    return this;
  }

   /**
   * The buyer's shipping address.
   * @return shippingAddress
  **/
  @ApiModelProperty(value = "The buyer's shipping address.")
  public Address getShippingAddress() {
    return shippingAddress;
  }

  public void setShippingAddress(Address shippingAddress) {
    this.shippingAddress = shippingAddress;
  }

  public CreatePaymentRequest note(String note) {
    this.note = note;
    return this;
  }

   /**
   * An optional note to be entered by the developer when creating a payment  Limit 500 characters.
   * @return note
  **/
  @ApiModelProperty(value = "An optional note to be entered by the developer when creating a payment  Limit 500 characters.")
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreatePaymentRequest createPaymentRequest = (CreatePaymentRequest) o;
    return Objects.equals(this.sourceId, createPaymentRequest.sourceId) &&
        Objects.equals(this.idempotencyKey, createPaymentRequest.idempotencyKey) &&
        Objects.equals(this.amountMoney, createPaymentRequest.amountMoney) &&
        Objects.equals(this.tipMoney, createPaymentRequest.tipMoney) &&
        Objects.equals(this.appFeeMoney, createPaymentRequest.appFeeMoney) &&
        Objects.equals(this.autocomplete, createPaymentRequest.autocomplete) &&
        Objects.equals(this.orderId, createPaymentRequest.orderId) &&
        Objects.equals(this.customerId, createPaymentRequest.customerId) &&
        Objects.equals(this.locationId, createPaymentRequest.locationId) &&
        Objects.equals(this.referenceId, createPaymentRequest.referenceId) &&
        Objects.equals(this.verificationToken, createPaymentRequest.verificationToken) &&
        Objects.equals(this.acceptPartialAuthorization, createPaymentRequest.acceptPartialAuthorization) &&
        Objects.equals(this.buyerEmailAddress, createPaymentRequest.buyerEmailAddress) &&
        Objects.equals(this.billingAddress, createPaymentRequest.billingAddress) &&
        Objects.equals(this.shippingAddress, createPaymentRequest.shippingAddress) &&
        Objects.equals(this.note, createPaymentRequest.note);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourceId, idempotencyKey, amountMoney, tipMoney, appFeeMoney, autocomplete, orderId, customerId, locationId, referenceId, verificationToken, acceptPartialAuthorization, buyerEmailAddress, billingAddress, shippingAddress, note);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreatePaymentRequest {\n");
    
    sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
    sb.append("    idempotencyKey: ").append(toIndentedString(idempotencyKey)).append("\n");
    sb.append("    amountMoney: ").append(toIndentedString(amountMoney)).append("\n");
    sb.append("    tipMoney: ").append(toIndentedString(tipMoney)).append("\n");
    sb.append("    appFeeMoney: ").append(toIndentedString(appFeeMoney)).append("\n");
    sb.append("    autocomplete: ").append(toIndentedString(autocomplete)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
    sb.append("    referenceId: ").append(toIndentedString(referenceId)).append("\n");
    sb.append("    verificationToken: ").append(toIndentedString(verificationToken)).append("\n");
    sb.append("    acceptPartialAuthorization: ").append(toIndentedString(acceptPartialAuthorization)).append("\n");
    sb.append("    buyerEmailAddress: ").append(toIndentedString(buyerEmailAddress)).append("\n");
    sb.append("    billingAddress: ").append(toIndentedString(billingAddress)).append("\n");
    sb.append("    shippingAddress: ").append(toIndentedString(shippingAddress)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

