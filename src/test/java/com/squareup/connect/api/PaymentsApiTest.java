/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.squareup.connect.api;

import com.squareup.connect.ApiException;
import com.squareup.connect.models.CancelPaymentByIdempotencyKeyRequest;
import com.squareup.connect.models.CancelPaymentByIdempotencyKeyResponse;
import com.squareup.connect.models.CancelPaymentResponse;
import com.squareup.connect.models.CompletePaymentResponse;
import com.squareup.connect.models.CreatePaymentRequest;
import com.squareup.connect.models.CreatePaymentResponse;
import com.squareup.connect.models.GetPaymentResponse;
import com.squareup.connect.models.ListPaymentsResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PaymentsApi
 */
@Ignore
public class PaymentsApiTest {

    private final PaymentsApi api = new PaymentsApi();

    
    /**
     * CancelPayment
     *
     * Cancels a payment. If you set &#x60;autocomplete&#x60; to false when creating a payment,  you can cancel the payment using this endpoint. For more information, see [Delayed Payments](/payments-api/take-payments#delayed-payments).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelPaymentTest() throws ApiException {
        String paymentId = null;
        CancelPaymentResponse response = api.cancelPayment(paymentId);

        // TODO: test validations
    }
    
    /**
     * CancelPaymentByIdempotencyKey
     *
     * Cancels a payment identified by the idenpotency key that is specified the request.  Use this method when status of a CreatePayment request is unknown. For example, after you send a CreatePayment request a network error occurs and you don&#39;t get a response. In this case, you can direct Square to cancel the payment using this endpoint. In the request, you provide the same idempotency key that you provided in your CreatePayment request you want  to cancel. After cancelling the payment, you can submit your CreatePayment request again. Note that if no payment with the specified idempotency key is found, no action is taken, the end  point returns successfully.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelPaymentByIdempotencyKeyTest() throws ApiException {
        CancelPaymentByIdempotencyKeyRequest body = null;
        CancelPaymentByIdempotencyKeyResponse response = api.cancelPaymentByIdempotencyKey(body);

        // TODO: test validations
    }
    
    /**
     * CompletePayment
     *
     * Completes a payment.  By default, payments are set to complete immediately after they are created.  If you set autocomplete to false when creating a payment,  you can complete the payment using this endpoint. For more information, see [Delayed Payments](/payments-api/take-payments#delayed-payments).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void completePaymentTest() throws ApiException {
        String paymentId = null;
        CompletePaymentResponse response = api.completePayment(paymentId);

        // TODO: test validations
    }
    
    /**
     * CreatePayment
     *
     * Charges a payment source, for example, a card  represented by customer&#39;s card on file or a card nonce. In addition  to the payment source, the request must also include the  amount to accept for the payment.  There are several optional parameters that you can include in the request.  For example, tip money, whether to autocomplete the payment, or a reference ID to correlate this payment with another system.  For more information about these  payment options, see [Take Payments](/payments-api/take-payments).  The &#x60;PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS&#x60; OAuth permission is required to enable application fees.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPaymentTest() throws ApiException {
        CreatePaymentRequest body = null;
        CreatePaymentResponse response = api.createPayment(body);

        // TODO: test validations
    }
    
    /**
     * GetPayment
     *
     * Retrieves details for a specific Payment.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPaymentTest() throws ApiException {
        String paymentId = null;
        GetPaymentResponse response = api.getPayment(paymentId);

        // TODO: test validations
    }
    
    /**
     * ListPayments
     *
     * Retrieves a list of payments taken by the account making the request.  Max results per page: 100
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPaymentsTest() throws ApiException {
        String beginTime = null;
        String endTime = null;
        String sortOrder = null;
        String cursor = null;
        String locationId = null;
        Long total = null;
        String last4 = null;
        String cardBrand = null;
        ListPaymentsResponse response = api.listPayments(beginTime, endTime, sortOrder, cursor, locationId, total, last4, cardBrand);

        // TODO: test validations
    }
    
}
