/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.squareup.connect.api;

import com.squareup.connect.ApiClient;
import com.squareup.connect.ApiException;
import com.squareup.connect.Configuration;
import com.squareup.connect.auth.OAuth;
import com.squareup.connect.models.Address;
import com.squareup.connect.models.CreateCheckoutRequest;
import com.squareup.connect.models.CreateCheckoutResponse;
import com.squareup.connect.models.CreateOrderRequest;
import com.squareup.connect.models.CreateOrderRequestDiscount;
import com.squareup.connect.models.CreateOrderRequestLineItem;
import com.squareup.connect.models.CreateOrderRequestTax;
import com.squareup.connect.models.Money;
import com.squareup.connect.utils.APITest;
import com.squareup.connect.utils.Account;
import java.util.Arrays;
import java.util.UUID;
import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.assertTrue;

/**
 * API tests for CheckoutApi
 */
public class CheckoutApiTest extends APITest {

    private final ApiClient defaultClient = Configuration.getDefaultApiClient();
    private final CheckoutApi api = new CheckoutApi();
    private String locationId;

    @Before
    public void setup() {
        Account testAccount = accounts.get("US-Prod-Sandbox");
        OAuth oauth2 = (OAuth) defaultClient.getAuthentication("oauth2");
        oauth2.setAccessToken(testAccount.accessToken);
        this.locationId = testAccount.locationId;
    }

    /**
     * CreateCheckout
     *
     * Creates a [Checkout](#type-checkout) response that links a &#x60;checkoutId&#x60; and
     * &#x60;checkout_page_url&#x60; that customers can be directed to in order to provide their
     * payment information using a payment processing workflow hosted on connect.squareup.com.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCheckoutTest() throws ApiException {
        CreateCheckoutRequest body = new CreateCheckoutRequest()
            .idempotencyKey(UUID.randomUUID().toString())
            .order(new CreateOrderRequest()
                .referenceId("reference_id")
                .lineItems(Arrays.asList(
                    new CreateOrderRequestLineItem()
                        .name("Printed T Shirt")
                        .quantity("2")
                        .basePriceMoney(new Money()
                            .amount(1500L)
                            .currency(Money.CurrencyEnum.USD))
                        .addDiscountsItem(
                            new CreateOrderRequestDiscount()
                                .name("7% off previous season item")
                                .percentage("7")
                        )
                        .addDiscountsItem(
                            new CreateOrderRequestDiscount()
                                .name("$3 off Customer Discount")
                                .amountMoney(new Money()
                                    .amount(300L)
                                    .currency(Money.CurrencyEnum.USD))
                        ),
                    new CreateOrderRequestLineItem()
                        .name("Slim Jeans")
                        .quantity("1")
                        .basePriceMoney(new Money()
                            .amount(2500L)
                            .currency(Money.CurrencyEnum.USD)),
                    new CreateOrderRequestLineItem()
                        .name("Woven Sweate")
                        .quantity("3")
                        .basePriceMoney(new Money()
                            .amount(3500L)
                            .currency(Money.CurrencyEnum.USD))
                        .addDiscountsItem(new CreateOrderRequestDiscount()
                            .name("$11 off Customer Discount")
                            .amountMoney(new Money()
                                .amount(1100L)
                                .currency(Money.CurrencyEnum.USD)))
                        .addTaxesItem(new CreateOrderRequestTax()
                            .name("Fair Trade Tax")
                            .percentage("5")
                        )

                ))
                .discounts(Arrays.asList(
                    new CreateOrderRequestDiscount()
                        .name("Father's day 12% OFF")
                        .percentage("12"),
                    new CreateOrderRequestDiscount()
                        .name("Global Sales $55 OFF")
                        .amountMoney(new Money()
                            .amount(5500L)
                            .currency(Money.CurrencyEnum.USD))
                ))
                .addTaxesItem(new CreateOrderRequestTax()
                    .name("Sales Tax")
                    .type(CreateOrderRequestTax.TypeEnum.ADDITIVE)
                    .percentage("8.5")
                )
            )
            .askForShippingAddress(true)
            .merchantSupportEmail("merchant+support@website.com")
            .prePopulateBuyerEmail("example@email.com")
            .prePopulateShippingAddress(new Address()
                .addressLine1("1455 Market St.")
                .addressLine2("Suite 600")
                .locality("San Francisco")
                .administrativeDistrictLevel1("CA")
                .postalCode("94103")
                .country(Address.CountryEnum.US)
                .firstName("Jane")
                .lastName("Doe")
            )
            .redirectUrl("https://merchant.website.com/order-confirm");

        CreateCheckoutResponse response = api.createCheckout(locationId, body);

        assertTrue(response.getErrors().isEmpty());
        assertTrue(response.getCheckout().getCheckoutPageUrl().startsWith("https://connect."));
    }
}
