/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.squareup.connect.api;

import com.squareup.connect.ApiException;
import com.squareup.connect.models.V1AdjustInventoryRequest;
import com.squareup.connect.models.V1InventoryEntry;
import com.squareup.connect.models.V1Item;
import com.squareup.connect.models.V1Category;
import com.squareup.connect.models.V1Discount;
import com.squareup.connect.models.V1Fee;
import com.squareup.connect.models.V1ModifierList;
import com.squareup.connect.models.V1ModifierOption;
import com.squareup.connect.models.V1Page;
import com.squareup.connect.models.V1Variation;
import com.squareup.connect.models.V1UpdateModifierListRequest;
import com.squareup.connect.models.V1PageCell;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VItemsApi
 */
@Ignore
public class V1ItemsApiTest {

    private final V1ItemsApi api = new V1ItemsApi();

    
    /**
     * Adjusts an item variation&#39;s current available inventory.
     *
     * Adjusts an item variation&#39;s current available inventory.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adjustInventoryTest() throws ApiException {
        String locationId = null;
        String variationId = null;
        V1AdjustInventoryRequest body = null;
        V1InventoryEntry response = api.adjustInventory(locationId, variationId, body);

        // TODO: test validations
    }
    
    /**
     * Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register.
     *
     * Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void applyFeeTest() throws ApiException {
        String locationId = null;
        String itemId = null;
        String feeId = null;
        V1Item response = api.applyFee(locationId, itemId, feeId);

        // TODO: test validations
    }
    
    /**
     * Associates a modifier list with an item, meaning modifier options from the list can be applied to the item.
     *
     * Associates a modifier list with an item, meaning modifier options from the list can be applied to the item.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void applyModifierListTest() throws ApiException {
        String locationId = null;
        String modifierListId = null;
        String itemId = null;
        V1Item response = api.applyModifierList(locationId, modifierListId, itemId);

        // TODO: test validations
    }
    
    /**
     * Creates an item category.
     *
     * Creates an item category.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCategoryTest() throws ApiException {
        String locationId = null;
        V1Category body = null;
        V1Category response = api.createCategory(locationId, body);

        // TODO: test validations
    }
    
    /**
     * Creates a discount.
     *
     * Creates a discount.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDiscountTest() throws ApiException {
        String locationId = null;
        V1Discount body = null;
        V1Discount response = api.createDiscount(locationId, body);

        // TODO: test validations
    }
    
    /**
     * Creates a fee (tax).
     *
     * Creates a fee (tax).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createFeeTest() throws ApiException {
        String locationId = null;
        V1Fee body = null;
        V1Fee response = api.createFee(locationId, body);

        // TODO: test validations
    }
    
    /**
     * Creates an item and at least one variation for it.
     *
     * Creates an item and at least one variation for it.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createItemTest() throws ApiException {
        String locationId = null;
        V1Item body = null;
        V1Item response = api.createItem(locationId, body);

        // TODO: test validations
    }
    
    /**
     * Creates an item modifier list and at least one modifier option for it.
     *
     * Creates an item modifier list and at least one modifier option for it.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createModifierListTest() throws ApiException {
        String locationId = null;
        V1ModifierList body = null;
        V1ModifierList response = api.createModifierList(locationId, body);

        // TODO: test validations
    }
    
    /**
     * Creates an item modifier option and adds it to a modifier list.
     *
     * Creates an item modifier option and adds it to a modifier list.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createModifierOptionTest() throws ApiException {
        String locationId = null;
        String modifierListId = null;
        V1ModifierOption body = null;
        V1ModifierOption response = api.createModifierOption(locationId, modifierListId, body);

        // TODO: test validations
    }
    
    /**
     * Creates a Favorites page in Square Register.
     *
     * Creates a Favorites page in Square Register.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPageTest() throws ApiException {
        String locationId = null;
        V1Page body = null;
        V1Page response = api.createPage(locationId, body);

        // TODO: test validations
    }
    
    /**
     * Creates an item variation for an existing item.
     *
     * Creates an item variation for an existing item.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createVariationTest() throws ApiException {
        String locationId = null;
        String itemId = null;
        V1Variation body = null;
        V1Variation response = api.createVariation(locationId, itemId, body);

        // TODO: test validations
    }
    
    /**
     * Deletes an existing item category.
     *
     * Deletes an existing item category.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCategoryTest() throws ApiException {
        String locationId = null;
        String categoryId = null;
        V1Category response = api.deleteCategory(locationId, categoryId);

        // TODO: test validations
    }
    
    /**
     * Deletes an existing discount.
     *
     * Deletes an existing discount.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDiscountTest() throws ApiException {
        String locationId = null;
        String discountId = null;
        V1Discount response = api.deleteDiscount(locationId, discountId);

        // TODO: test validations
    }
    
    /**
     * Deletes an existing fee (tax).
     *
     * Deletes an existing fee (tax).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFeeTest() throws ApiException {
        String locationId = null;
        String feeId = null;
        V1Fee response = api.deleteFee(locationId, feeId);

        // TODO: test validations
    }
    
    /**
     * Deletes an existing item and all item variations associated with it.
     *
     * Deletes an existing item and all item variations associated with it.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteItemTest() throws ApiException {
        String locationId = null;
        String itemId = null;
        V1Item response = api.deleteItem(locationId, itemId);

        // TODO: test validations
    }
    
    /**
     * Deletes an existing item modifier list and all modifier options associated with it.
     *
     * Deletes an existing item modifier list and all modifier options associated with it.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteModifierListTest() throws ApiException {
        String locationId = null;
        String modifierListId = null;
        V1ModifierList response = api.deleteModifierList(locationId, modifierListId);

        // TODO: test validations
    }
    
    /**
     * Deletes an existing item modifier option from a modifier list.
     *
     * Deletes an existing item modifier option from a modifier list.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteModifierOptionTest() throws ApiException {
        String locationId = null;
        String modifierListId = null;
        String modifierOptionId = null;
        V1ModifierOption response = api.deleteModifierOption(locationId, modifierListId, modifierOptionId);

        // TODO: test validations
    }
    
    /**
     * Deletes an existing Favorites page and all of its cells.
     *
     * Deletes an existing Favorites page and all of its cells.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePageTest() throws ApiException {
        String locationId = null;
        String pageId = null;
        V1Page response = api.deletePage(locationId, pageId);

        // TODO: test validations
    }
    
    /**
     * Deletes a cell from a Favorites page in Square Register.
     *
     * Deletes a cell from a Favorites page in Square Register.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePageCellTest() throws ApiException {
        String locationId = null;
        String pageId = null;
        String row = null;
        String column = null;
        V1Page response = api.deletePageCell(locationId, pageId, row, column);

        // TODO: test validations
    }
    
    /**
     * Deletes an existing item variation from an item.
     *
     * Deletes an existing item variation from an item.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteVariationTest() throws ApiException {
        String locationId = null;
        String itemId = null;
        String variationId = null;
        V1Variation response = api.deleteVariation(locationId, itemId, variationId);

        // TODO: test validations
    }
    
    /**
     * Lists all of a location&#39;s item categories.
     *
     * Lists all of a location&#39;s item categories.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCategoriesTest() throws ApiException {
        String locationId = null;
        List<V1Category> response = api.listCategories(locationId);

        // TODO: test validations
    }
    
    /**
     * Lists all of a location&#39;s discounts.
     *
     * Lists all of a location&#39;s discounts.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listDiscountsTest() throws ApiException {
        String locationId = null;
        List<V1Discount> response = api.listDiscounts(locationId);

        // TODO: test validations
    }
    
    /**
     * Lists all of a location&#39;s fees (taxes).
     *
     * Lists all of a location&#39;s fees (taxes).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listFeesTest() throws ApiException {
        String locationId = null;
        List<V1Fee> response = api.listFees(locationId);

        // TODO: test validations
    }
    
    /**
     * Provides inventory information for all of a merchant&#39;s inventory-enabled item variations.
     *
     * Provides inventory information for all of a merchant&#39;s inventory-enabled item variations.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listInventoryTest() throws ApiException {
        String locationId = null;
        Integer limit = null;
        List<V1InventoryEntry> response = api.listInventory(locationId, limit);

        // TODO: test validations
    }
    
    /**
     * Provides summary information for all of a location&#39;s items.
     *
     * Provides summary information for all of a location&#39;s items.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listItemsTest() throws ApiException {
        String locationId = null;
        List<V1Item> response = api.listItems(locationId);

        // TODO: test validations
    }
    
    /**
     * Lists all of a location&#39;s modifier lists.
     *
     * Lists all of a location&#39;s modifier lists.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listModifierListsTest() throws ApiException {
        String locationId = null;
        List<V1ModifierList> response = api.listModifierLists(locationId);

        // TODO: test validations
    }
    
    /**
     * Lists all of a location&#39;s Favorites pages in Square Register.
     *
     * Lists all of a location&#39;s Favorites pages in Square Register.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPagesTest() throws ApiException {
        String locationId = null;
        List<V1Page> response = api.listPages(locationId);

        // TODO: test validations
    }
    
    /**
     * Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register.
     *
     * Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeFeeTest() throws ApiException {
        String locationId = null;
        String itemId = null;
        String feeId = null;
        V1Item response = api.removeFee(locationId, itemId, feeId);

        // TODO: test validations
    }
    
    /**
     * Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item.
     *
     * Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeModifierListTest() throws ApiException {
        String locationId = null;
        String modifierListId = null;
        String itemId = null;
        V1Item response = api.removeModifierList(locationId, modifierListId, itemId);

        // TODO: test validations
    }
    
    /**
     * Provides the details for a single item, including associated modifier lists and fees.
     *
     * Provides the details for a single item, including associated modifier lists and fees.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveItemTest() throws ApiException {
        String locationId = null;
        String itemId = null;
        V1Item response = api.retrieveItem(locationId, itemId);

        // TODO: test validations
    }
    
    /**
     * Provides the details for a single modifier list.
     *
     * Provides the details for a single modifier list.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveModifierListTest() throws ApiException {
        String locationId = null;
        String modifierListId = null;
        V1ModifierList response = api.retrieveModifierList(locationId, modifierListId);

        // TODO: test validations
    }
    
    /**
     * Modifies the details of an existing item category.
     *
     * Modifies the details of an existing item category.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCategoryTest() throws ApiException {
        String locationId = null;
        String categoryId = null;
        V1Category body = null;
        V1Category response = api.updateCategory(locationId, categoryId, body);

        // TODO: test validations
    }
    
    /**
     * Modifies the details of an existing discount.
     *
     * Modifies the details of an existing discount.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDiscountTest() throws ApiException {
        String locationId = null;
        String discountId = null;
        V1Discount body = null;
        V1Discount response = api.updateDiscount(locationId, discountId, body);

        // TODO: test validations
    }
    
    /**
     * Modifies the details of an existing fee (tax).
     *
     * Modifies the details of an existing fee (tax).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateFeeTest() throws ApiException {
        String locationId = null;
        String feeId = null;
        V1Fee body = null;
        V1Fee response = api.updateFee(locationId, feeId, body);

        // TODO: test validations
    }
    
    /**
     * Modifies the core details of an existing item.
     *
     * Modifies the core details of an existing item.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateItemTest() throws ApiException {
        String locationId = null;
        String itemId = null;
        V1Item body = null;
        V1Item response = api.updateItem(locationId, itemId, body);

        // TODO: test validations
    }
    
    /**
     * Modifies the details of an existing item modifier list.
     *
     * Modifies the details of an existing item modifier list.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateModifierListTest() throws ApiException {
        String locationId = null;
        String modifierListId = null;
        V1UpdateModifierListRequest body = null;
        V1ModifierList response = api.updateModifierList(locationId, modifierListId, body);

        // TODO: test validations
    }
    
    /**
     * Modifies the details of an existing item modifier option.
     *
     * Modifies the details of an existing item modifier option.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateModifierOptionTest() throws ApiException {
        String locationId = null;
        String modifierListId = null;
        String modifierOptionId = null;
        V1ModifierOption body = null;
        V1ModifierOption response = api.updateModifierOption(locationId, modifierListId, modifierOptionId, body);

        // TODO: test validations
    }
    
    /**
     * Modifies the details of a Favorites page in Square Register.
     *
     * Modifies the details of a Favorites page in Square Register.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePageTest() throws ApiException {
        String locationId = null;
        String pageId = null;
        V1Page body = null;
        V1Page response = api.updatePage(locationId, pageId, body);

        // TODO: test validations
    }
    
    /**
     * Modifies a cell of a Favorites page in Square Register.
     *
     * Modifies a cell of a Favorites page in Square Register.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePageCellTest() throws ApiException {
        String locationId = null;
        String pageId = null;
        V1PageCell body = null;
        V1Page response = api.updatePageCell(locationId, pageId, body);

        // TODO: test validations
    }
    
    /**
     * Modifies the details of an existing item variation.
     *
     * Modifies the details of an existing item variation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateVariationTest() throws ApiException {
        String locationId = null;
        String itemId = null;
        String variationId = null;
        V1Variation body = null;
        V1Variation response = api.updateVariation(locationId, itemId, variationId, body);

        // TODO: test validations
    }
    
}
