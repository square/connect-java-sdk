/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.squareup.connect.api;

import com.squareup.connect.ApiException;
import com.squareup.connect.models.V1Employee;
import com.squareup.connect.models.V1EmployeeRole;
import com.squareup.connect.models.V1Timecard;
import com.squareup.connect.models.V1CashDrawerShift;
import com.squareup.connect.models.V1TimecardEvent;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VEmployeesApi
 */
@Ignore
public class V1EmployeesApiTest {

    private final V1EmployeesApi api = new V1EmployeesApi();

    
    /**
     * Creates an employee for a business.
     *
     * Creates an employee for a business.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createEmployeeTest() throws ApiException {
        V1Employee body = null;
        V1Employee response = api.createEmployee(body);

        // TODO: test validations
    }
    
    /**
     * Creates an employee role you can then assign to employees.
     *
     * Creates an employee role you can then assign to employees.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createEmployeeRoleTest() throws ApiException {
        V1EmployeeRole employeeRole = null;
        V1EmployeeRole response = api.createEmployeeRole(employeeRole);

        // TODO: test validations
    }
    
    /**
     * Creates a timecard for an employee. Each timecard corresponds to a single shift.
     *
     * Creates a timecard for an employee. Each timecard corresponds to a single shift.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTimecardTest() throws ApiException {
        V1Timecard body = null;
        V1Timecard response = api.createTimecard(body);

        // TODO: test validations
    }
    
    /**
     * Deletes a timecard. Deleted timecards are still accessible from Connect API endpoints, but the value of their deleted field is set to true. See Handling deleted timecards for more information.
     *
     * Deletes a timecard. Deleted timecards are still accessible from Connect API endpoints, but the value of their deleted field is set to true. See Handling deleted timecards for more information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTimecardTest() throws ApiException {
        String timecardId = null;
        Object response = api.deleteTimecard(timecardId);

        // TODO: test validations
    }
    
    /**
     * Provides the details for all of a location&#39;s cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
     *
     * Provides the details for all of a location&#39;s cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCashDrawerShiftsTest() throws ApiException {
        String locationId = null;
        String order = null;
        String beginTime = null;
        String endTime = null;
        List<V1CashDrawerShift> response = api.listCashDrawerShifts(locationId, order, beginTime, endTime);

        // TODO: test validations
    }
    
    /**
     * Provides summary information for all of a business&#39;s employee roles.
     *
     * Provides summary information for all of a business&#39;s employee roles.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listEmployeeRolesTest() throws ApiException {
        String order = null;
        Integer limit = null;
        String cursor = null;
        List<V1EmployeeRole> response = api.listEmployeeRoles(order, limit, cursor);

        // TODO: test validations
    }
    
    /**
     * Provides summary information for all of a business&#39;s employees.
     *
     * Provides summary information for all of a business&#39;s employees.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listEmployeesTest() throws ApiException {
        String order = null;
        String beginUpdatedAt = null;
        String endUpdatedAt = null;
        String beginCreatedAt = null;
        String endCreatedAt = null;
        String status = null;
        String externalId = null;
        Integer limit = null;
        List<V1Employee> response = api.listEmployees(order, beginUpdatedAt, endUpdatedAt, beginCreatedAt, endCreatedAt, status, externalId, limit);

        // TODO: test validations
    }
    
    /**
     * Provides summary information for all events associated with a particular timecard.
     *
     * Provides summary information for all events associated with a particular timecard.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listTimecardEventsTest() throws ApiException {
        String timecardId = null;
        List<V1TimecardEvent> response = api.listTimecardEvents(timecardId);

        // TODO: test validations
    }
    
    /**
     * Provides summary information for all of a business&#39;s employee timecards.
     *
     * Provides summary information for all of a business&#39;s employee timecards.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listTimecardsTest() throws ApiException {
        String order = null;
        String employeeId = null;
        String beginClockinTime = null;
        String endClockinTime = null;
        String beginClockoutTime = null;
        String endClockoutTime = null;
        String beginUpdatedAt = null;
        String endUpdatedAt = null;
        Boolean deleted = null;
        Integer limit = null;
        String cursor = null;
        List<V1Timecard> response = api.listTimecards(order, employeeId, beginClockinTime, endClockinTime, beginClockoutTime, endClockoutTime, beginUpdatedAt, endUpdatedAt, deleted, limit, cursor);

        // TODO: test validations
    }
    
    /**
     * Provides the details for a single cash drawer shift, including all events that occurred during the shift.
     *
     * Provides the details for a single cash drawer shift, including all events that occurred during the shift.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveCashDrawerShiftTest() throws ApiException {
        String locationId = null;
        String shiftId = null;
        V1CashDrawerShift response = api.retrieveCashDrawerShift(locationId, shiftId);

        // TODO: test validations
    }
    
    /**
     * Provides the details for a single employee.
     *
     * Provides the details for a single employee.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveEmployeeTest() throws ApiException {
        String employeeId = null;
        V1Employee response = api.retrieveEmployee(employeeId);

        // TODO: test validations
    }
    
    /**
     * Provides the details for a single employee role.
     *
     * Provides the details for a single employee role.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveEmployeeRoleTest() throws ApiException {
        String roleId = null;
        V1EmployeeRole response = api.retrieveEmployeeRole(roleId);

        // TODO: test validations
    }
    
    /**
     * Provides the details for a single timecard.
     *
     * Provides the details for a single timecard.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveTimecardTest() throws ApiException {
        String timecardId = null;
        V1Timecard response = api.retrieveTimecard(timecardId);

        // TODO: test validations
    }
    
    /**
     * V1 UpdateEmployee
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateEmployeeTest() throws ApiException {
        String employeeId = null;
        V1Employee body = null;
        V1Employee response = api.updateEmployee(employeeId, body);

        // TODO: test validations
    }
    
    /**
     * Modifies the details of an employee role.
     *
     * Modifies the details of an employee role.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateEmployeeRoleTest() throws ApiException {
        String roleId = null;
        V1EmployeeRole body = null;
        V1EmployeeRole response = api.updateEmployeeRole(roleId, body);

        // TODO: test validations
    }
    
    /**
     * Modifies a timecard&#39;s details. This creates an API_EDIT event for the timecard. You can view a timecard&#39;s event history with the List Timecard Events endpoint.
     *
     * Modifies a timecard&#39;s details. This creates an API_EDIT event for the timecard. You can view a timecard&#39;s event history with the List Timecard Events endpoint.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTimecardTest() throws ApiException {
        String timecardId = null;
        V1Timecard body = null;
        V1Timecard response = api.updateTimecard(timecardId, body);

        // TODO: test validations
    }
    
}
